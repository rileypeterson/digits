{"puzzleDate": "2023-10-01", "r1": {"n": [4, 6, 8, 10, 12, 15], "how": {"97": ["(8 + 4) --> (12 - 6) --> (6 * 12) --> (72 + 15) --> (87 + 10) --> 97", "(8 + 4) --> (12 * 6) --> (72 + 15) --> (87 + 10) --> 97", "(8 - 4) --> (4 + 6) --> (10 * 10) --> (100 + 12) --> (112 - 15) --> 97", "(8 * 12) --> (96 - 4) --> (92 + 15) --> (107 - 10) --> 97", "(8 * 12) --> (96 + 6) --> (102 - 15) --> (87 + 10) --> 97", "(8 + 6) --> (14 + 15) --> (29 * 12) --> (348 / 4) --> (87.0 + 10) --> 97", "(8 * 10) --> (80 - 4) --> (76 + 6) --> (82 + 15) --> 97", "(4 + 12) --> (16 * 8) --> (128 - 6) --> (122 - 15) --> (107 - 10) --> 97", "(4 * 12) --> (48 + 15) --> (63 * 10) --> (630 / 6) --> (105.0 - 8) --> 97", "(4 + 6) --> (10 * 12) --> (120 - 8) --> (112 - 15) --> 97", "(4 * 6) --> (24 - 12) --> (12 * 10) --> (120 - 8) --> (112 - 15) --> 97", "(4 * 6) --> (24 - 10) --> (14 * 8) --> (112 - 15) --> 97", "(4 + 6) --> (10 * 10) --> (100 + 12) --> (112 - 15) --> 97", "(4 + 10) --> (14 * 8) --> (112 - 15) --> 97", "(12 / 4) --> (3.0 + 6) --> (9.0 * 10) --> (90.0 - 8) --> (82.0 + 15) --> 97", "(12 / 4) --> (3.0 + 10) --> (13.0 - 6) --> (7.0 * 15) --> (105.0 - 8) --> 97", "(12 + 6) --> (18 * 4) --> (72 + 15) --> (87 + 10) --> 97", "(12 * 6) --> (72 + 15) --> (87 + 10) --> 97", "(12 * 10) --> (120 - 8) --> (112 - 15) --> 97", "(12 - 10) --> (2 * 4) --> (8 + 6) --> (14 * 8) --> (112 - 15) --> 97", "(6 * 15) --> (90 - 12) --> (78 * 10) --> (780 - 4) --> (776 / 8) --> 97"]}, "target": 97, "n_ways": 21, "round": 1}, "r2": {"n": [4, 6, 10, 13, 17, 20], "how": {"165": ["(20 + 4) --> (24 / 6) --> (4.0 + 10) --> (14.0 * 13) --> (182.0 - 17) --> 165", "(20 * 4) --> (80 / 10) --> (8.0 + 6) --> (14.0 * 13) --> (182.0 - 17) --> 165", "(20 + 4) --> (24 - 10) --> (14 * 13) --> (182 - 17) --> 165", "(20 + 17) --> (37 * 4) --> (148 - 6) --> (142 + 13) --> (155 + 10) --> 165", "(20 - 6) --> (14 * 13) --> (182 - 17) --> 165", "(20 + 13) --> (33 * 4) --> (132 + 17) --> (149 + 6) --> (155 + 10) --> 165", "(20 / 10) --> (2.0 + 17) --> (19.0 - 6) --> (13.0 * 13) --> (169.0 - 4) --> 165", "(4 + 17) --> (21 - 6) --> (15 * 13) --> (195 - 20) --> (175 - 10) --> 165", "(4 * 17) --> (68 - 13) --> (55 * 6) --> (330 * 10) --> (3300 / 20) --> 165", "(4 * 6) --> (24 - 20) --> (4 + 10) --> (14 * 13) --> (182 - 17) --> 165", "(4 * 6) --> (24 - 10) --> (14 * 13) --> (182 - 17) --> 165", "(4 * 13) --> (52 - 20) --> (32 * 6) --> (192 - 17) --> (175 - 10) --> 165", "(4 + 10) --> (14 * 13) --> (182 - 17) --> 165", "(17 - 4) --> (13 * 13) --> (169 - 20) --> (149 + 6) --> (155 + 10) --> 165", "(17 - 4) --> (13 * 13) --> (169 + 6) --> (175 - 10) --> 165", "(17 + 6) --> (23 + 10) --> (33 * 20) --> (660 / 4) --> 165", "(13 * 10) --> (130 - 20) --> (110 * 6) --> (660 / 4) --> 165"]}, "target": 165, "n_ways": 17, "round": 2}, "r3": {"n": [6, 8, 10, 16, 18, 20], "how": {"275": ["(16 + 18) --> (34 * 10) --> (340 * 6) --> (2040 / 8) --> (255.0 + 20) --> 275", "(16 * 6) --> (96 + 18) --> (114 * 20) --> (2280 / 8) --> (285.0 - 10) --> 275"]}, "target": 275, "n_ways": 2, "round": 3}, "r4": {"n": [4, 7, 11, 14, 19, 25], "how": {"402": ["(4 + 25) --> (29 * 14) --> (406 + 7) --> (413 - 11) --> 402", "(4 * 11) --> (44 + 19) --> (63 * 7) --> (441 - 25) --> (416 - 14) --> 402", "(25 - 4) --> (21 * 19) --> (399 + 14) --> (413 - 11) --> 402", "(25 - 7) --> (18 + 11) --> (29 * 14) --> (406 - 4) --> 402", "(25 + 19) --> (44 + 14) --> (58 * 7) --> (406 - 4) --> 402", "(7 * 19) --> (133 - 11) --> (122 * 14) --> (1708 / 4) --> (427.0 - 25) --> 402", "(19 + 11) --> (30 * 14) --> (420 - 25) --> (395 + 7) --> 402"]}, "target": 402, "n_ways": 7, "round": 4}, "r5": {"n": [8, 11, 15, 17, 20, 22], "how": {"548": ["(17 + 15) --> (32 - 8) --> (24 * 22) --> (528 + 20) --> 548", "(17 + 8) --> (25 * 20) --> (500 + 11) --> (511 + 22) --> (533 + 15) --> 548", "(11 + 22) --> (33 - 17) --> (16 + 20) --> (36 * 15) --> (540 + 8) --> 548", "(11 + 22) --> (33 * 17) --> (561 - 20) --> (541 + 15) --> (556 - 8) --> 548", "(15 - 11) --> (4 * 22) --> (88 - 17) --> (71 * 8) --> (568 - 20) --> 548"]}, "target": 548, "n_ways": 5, "round": 5}}