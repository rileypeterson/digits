{"puzzleDate": "2025-07-04", "r1": {"n": [3, 6, 9, 10, 12, 15], "how": {"89": ["(15 + 6) --> (21 + 10) --> (31 * 9) --> (279 - 12) --> (267 / 3) --> 89", "(15 * 6) --> (90 - 10) --> (80 + 9) --> 89", "(15 * 6) --> (90 - 10) --> (80 + 12) --> (92 - 3) --> 89", "(15 - 6) --> (9 * 12) --> (108 - 10) --> (98 - 9) --> 89", "(15 + 6) --> (21 + 12) --> (33 * 3) --> (99 - 10) --> 89", "(15 + 10) --> (25 * 9) --> (225 + 6) --> (231 / 3) --> (77.0 + 12) --> 89", "(15 * 10) --> (150 - 12) --> (138 * 6) --> (828 / 9) --> (92.0 - 3) --> 89", "(15 + 10) --> (25 * 12) --> (300 - 6) --> (294 / 3) --> (98.0 - 9) --> 89", "(15 * 12) --> (180 / 6) --> (30.0 * 3) --> (90.0 - 10) --> (80.0 + 9) --> 89", "(15 - 12) --> (3 * 9) --> (27 + 6) --> (33 * 3) --> (99 - 10) --> 89", "(15 + 3) --> (18 * 6) --> (108 - 10) --> (98 - 9) --> 89", "(15 / 3) --> (5.0 + 6) --> (11.0 * 9) --> (99.0 - 10) --> 89", "(6 + 10) --> (16 * 15) --> (240 / 3) --> (80.0 + 9) --> 89", "(6 * 12) --> (72 + 15) --> (87 - 10) --> (77 + 9) --> (86 + 3) --> 89", "(6 + 3) --> (9 * 12) --> (108 - 10) --> (98 - 9) --> 89", "(9 - 6) --> (3 * 15) --> (45 - 12) --> (33 * 3) --> (99 - 10) --> 89", "(9 * 12) --> (108 - 15) --> (93 + 6) --> (99 - 10) --> 89", "(9 * 12) --> (108 - 6) --> (102 - 10) --> (92 - 3) --> 89", "(9 * 3) --> (27 + 10) --> (37 * 12) --> (444 / 6) --> (74.0 + 15) --> 89", "(12 + 3) --> (15 * 6) --> (90 - 10) --> (80 + 9) --> 89"]}, "target": 89, "n_ways": 20, "round": 1}, "r2": {"n": [3, 5, 8, 11, 12, 16], "how": {"241": ["(12 * 5) --> (60 + 16) --> (76 + 8) --> (84 * 3) --> (252 - 11) --> 241", "(12 * 3) --> (36 + 16) --> (52 * 5) --> (260 - 11) --> (249 - 8) --> 241", "(12 + 8) --> (20 * 11) --> (220 + 5) --> (225 + 16) --> 241", "(5 * 3) --> (15 * 16) --> (240 + 12) --> (252 - 11) --> 241", "(5 * 3) --> (15 + 8) --> (23 * 11) --> (253 - 12) --> 241", "(5 + 16) --> (21 * 12) --> (252 - 3) --> (249 - 8) --> 241", "(5 + 16) --> (21 * 12) --> (252 - 11) --> 241", "(5 + 16) --> (21 + 11) --> (32 * 8) --> (256 - 12) --> (244 - 3) --> 241", "(5 * 11) --> (55 + 12) --> (67 + 8) --> (75 * 3) --> (225 + 16) --> 241", "(5 + 11) --> (16 * 16) --> (256 - 12) --> (244 - 3) --> 241", "(5 * 8) --> (40 - 3) --> (37 - 16) --> (21 * 12) --> (252 - 11) --> 241", "(3 + 16) --> (19 * 12) --> (228 + 5) --> (233 + 8) --> 241", "(3 * 11) --> (33 + 12) --> (45 * 5) --> (225 + 16) --> 241", "(3 + 11) --> (14 * 16) --> (224 + 12) --> (236 + 5) --> 241", "(16 - 3) --> (13 + 8) --> (21 * 12) --> (252 - 11) --> 241", "(16 / 8) --> (2.0 + 5) --> (7.0 * 12) --> (84.0 * 3) --> (252.0 - 11) --> 241", "(11 + 8) --> (19 * 12) --> (228 - 3) --> (225 + 16) --> 241"]}, "target": 241, "n_ways": 17, "round": 2}, "r3": {"n": [3, 6, 7, 10, 13, 19], "how": {"268": ["(13 * 6) --> (78 - 10) --> (68 + 19) --> (87 * 3) --> (261 + 7) --> 268", "(13 * 3) --> (39 + 10) --> (49 * 6) --> (294 - 7) --> (287 - 19) --> 268", "(6 * 7) --> (42 - 13) --> (29 * 10) --> (290 - 3) --> (287 - 19) --> 268", "(6 / 3) --> (2.0 + 13) --> (15.0 * 19) --> (285.0 - 7) --> (278.0 - 10) --> 268", "(7 * 10) --> (70 + 13) --> (83 * 3) --> (249 + 19) --> 268"]}, "target": 268, "n_ways": 5, "round": 3}, "r4": {"n": [8, 9, 14, 19, 24, 25], "how": {"429": ["(8 + 24) --> (32 * 14) --> (448 - 19) --> 429", "(8 + 25) --> (33 * 14) --> (462 - 24) --> (438 - 9) --> 429", "(19 * 25) --> (475 - 8) --> (467 - 24) --> (443 - 14) --> 429", "(24 - 8) --> (16 - 9) --> (7 + 25) --> (32 * 14) --> (448 - 19) --> 429", "(24 - 19) --> (5 + 25) --> (30 * 14) --> (420 + 9) --> 429", "(14 + 9) --> (23 * 19) --> (437 - 8) --> 429", "(25 - 24) --> (1 * 14) --> (14 + 9) --> (23 * 19) --> (437 - 8) --> 429"]}, "target": 429, "n_ways": 7, "round": 4}, "r5": {"n": [5, 8, 11, 16, 23, 24], "how": {"444": ["(23 - 5) --> (18 * 11) --> (198 + 24) --> (222 * 16) --> (3552 / 8) --> 444", "(8 - 5) --> (3 + 16) --> (19 * 24) --> (456 - 23) --> (433 + 11) --> 444", "(11 * 16) --> (176 - 23) --> (153 - 5) --> (148 * 24) --> (3552 / 8) --> 444"]}, "target": 444, "n_ways": 3, "round": 5}}