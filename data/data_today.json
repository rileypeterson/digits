{"puzzleDate": "2024-01-20", "r1": {"n": [2, 3, 8, 10, 12, 13], "how": {"94": ["(8 + 2) --> (10 * 12) --> (120 - 10) --> (110 - 3) --> (107 - 13) --> 94", "(8 * 2) --> (16 + 12) --> (28 * 3) --> (84 + 10) --> 94", "(8 + 2) --> (10 - 3) --> (7 * 12) --> (84 + 10) --> 94", "(8 / 2) --> (4.0 + 3) --> (7.0 * 12) --> (84.0 + 10) --> 94", "(8 * 12) --> (96 - 2) --> 94", "(8 * 12) --> (96 - 2) --> (94 + 10) --> (104 + 3) --> (107 - 13) --> 94", "(8 + 12) --> (20 * 3) --> (60 - 13) --> (47 * 2) --> 94", "(8 * 10) --> (80 + 2) --> (82 + 12) --> 94", "(8 * 10) --> (80 - 2) --> (78 + 3) --> (81 + 13) --> 94", "(8 + 10) --> (18 * 3) --> (54 - 13) --> (41 * 2) --> (82 + 12) --> 94", "(8 - 3) --> (5 * 12) --> (60 - 13) --> (47 * 2) --> 94", "(8 * 3) --> (24 + 10) --> (34 + 13) --> (47 * 2) --> 94", "(8 * 13) --> (104 + 2) --> (106 - 12) --> 94", "(8 + 13) --> (21 * 12) --> (252 / 3) --> (84.0 + 10) --> 94", "(8 * 13) --> (104 - 10) --> 94", "(8 + 13) --> (21 * 3) --> (63 - 10) --> (53 * 2) --> (106 - 12) --> 94", "(2 * 12) --> (24 + 10) --> (34 * 3) --> (102 - 8) --> 94", "(2 * 12) --> (24 / 3) --> (8.0 * 13) --> (104.0 - 10) --> 94", "(2 + 13) --> (15 - 8) --> (7 * 12) --> (84 + 10) --> 94", "(12 - 8) --> (4 * 2) --> (8 * 13) --> (104 - 10) --> 94", "(12 - 8) --> (4 + 10) --> (14 / 2) --> (7.0 * 13) --> (91.0 + 3) --> 94", "(12 - 2) --> (10 + 3) --> (13 * 8) --> (104 - 10) --> 94", "(12 * 10) --> (120 - 8) --> (112 - 2) --> (110 - 3) --> (107 - 13) --> 94", "(12 * 10) --> (120 + 8) --> (128 + 13) --> (141 * 2) --> (282 / 3) --> 94", "(12 + 10) --> (22 + 13) --> (35 * 8) --> (280 + 2) --> (282 / 3) --> 94", "(10 + 3) --> (13 * 8) --> (104 * 12) --> (1248 / 13) --> (96.0 - 2) --> 94", "(10 * 3) --> (30 - 13) --> (17 * 12) --> (204 / 2) --> (102.0 - 8) --> 94", "(10 + 13) --> (23 * 12) --> (276 / 3) --> (92.0 + 2) --> 94", "(3 - 2) --> (1 * 8) --> (8 * 13) --> (104 - 10) --> 94", "(3 * 13) --> (39 + 8) --> (47 * 2) --> 94", "(3 + 13) --> (16 - 8) --> (8 * 12) --> (96 - 2) --> 94", "(3 + 13) --> (16 - 8) --> (8 * 10) --> (80 + 2) --> (82 + 12) --> 94", "(13 - 8) --> (5 * 12) --> (60 - 10) --> (50 - 3) --> (47 * 2) --> 94", "(13 - 3) --> (10 * 8) --> (80 + 2) --> (82 + 12) --> 94", "(13 - 3) --> (10 * 10) --> (100 - 8) --> (92 + 2) --> 94"]}, "target": 94, "n_ways": 35, "round": 1}, "r2": {"n": [8, 10, 11, 14, 16, 19], "how": {"255": ["(14 + 8) --> (22 * 11) --> (242 - 16) --> (226 + 10) --> (236 + 19) --> 255", "(14 + 8) --> (22 * 10) --> (220 + 16) --> (236 + 19) --> 255", "(14 - 8) --> (6 + 19) --> (25 * 10) --> (250 - 11) --> (239 + 16) --> 255", "(14 - 11) --> (3 + 10) --> (13 * 19) --> (247 + 8) --> 255", "(14 * 19) --> (266 - 11) --> 255", "(8 + 16) --> (24 * 11) --> (264 + 10) --> (274 - 19) --> 255", "(8 + 16) --> (24 - 10) --> (14 * 19) --> (266 - 11) --> 255", "(8 + 10) --> (18 * 14) --> (252 - 16) --> (236 + 19) --> 255", "(8 + 10) --> (18 * 16) --> (288 - 14) --> (274 - 19) --> 255", "(11 + 16) --> (27 - 14) --> (13 * 19) --> (247 + 8) --> 255", "(16 / 8) --> (2.0 + 19) --> (21.0 * 11) --> (231.0 + 14) --> (245.0 + 10) --> 255", "(16 + 19) --> (35 * 8) --> (280 - 14) --> (266 - 11) --> 255"]}, "target": 255, "n_ways": 12, "round": 2}, "r3": {"n": [3, 4, 6, 11, 14, 18], "how": {"320": ["(4 - 3) --> (1 * 6) --> (6 + 11) --> (17 * 18) --> (306 + 14) --> 320", "(18 * 6) --> (108 * 3) --> (324 - 4) --> 320", "(18 * 6) --> (108 - 3) --> (105 - 11) --> (94 - 14) --> (80 * 4) --> 320", "(18 / 6) --> (3.0 + 3) --> (6.0 * 11) --> (66.0 + 14) --> (80.0 * 4) --> 320", "(18 / 3) --> (6.0 * 11) --> (66.0 + 14) --> (80.0 * 4) --> 320", "(6 / 3) --> (2.0 + 4) --> (6.0 + 11) --> (17.0 * 18) --> (306.0 + 14) --> 320", "(6 * 3) --> (18 - 11) --> (7 * 14) --> (98 - 18) --> (80 * 4) --> 320", "(6 + 11) --> (17 * 18) --> (306 + 14) --> 320", "(6 * 11) --> (66 + 14) --> (80 * 4) --> 320", "(3 * 11) --> (33 + 18) --> (51 * 6) --> (306 + 14) --> 320", "(3 * 11) --> (33 * 14) --> (462 + 18) --> (480 * 4) --> (1920 / 6) --> 320", "(3 * 14) --> (42 / 6) --> (7.0 + 11) --> (18.0 * 18) --> (324.0 - 4) --> 320", "(11 - 6) --> (5 * 4) --> (20 - 3) --> (17 * 18) --> (306 + 14) --> 320", "(14 - 11) --> (3 * 18) --> (54 * 6) --> (324 - 4) --> 320"]}, "target": 320, "n_ways": 14, "round": 3}, "r4": {"n": [5, 10, 13, 16, 21, 25], "how": {"438": ["(21 - 5) --> (16 + 25) --> (41 - 13) --> (28 * 16) --> (448 - 10) --> 438", "(21 + 5) --> (26 * 16) --> (416 + 25) --> (441 - 13) --> (428 + 10) --> 438", "(5 + 16) --> (21 * 21) --> (441 - 13) --> (428 + 10) --> 438", "(5 * 10) --> (50 - 16) --> (34 * 13) --> (442 + 21) --> (463 - 25) --> 438", "(25 / 5) --> (5.0 + 16) --> (21.0 * 21) --> (441.0 - 13) --> (428.0 + 10) --> 438"]}, "target": 438, "n_ways": 5, "round": 4}, "r5": {"n": [6, 9, 12, 13, 20, 25], "how": {"476": ["(25 + 12) --> (37 + 13) --> (50 * 9) --> (450 + 20) --> (470 + 6) --> 476", "(25 + 12) --> (37 * 13) --> (481 + 9) --> (490 - 20) --> (470 + 6) --> 476", "(25 + 13) --> (38 * 12) --> (456 + 20) --> 476", "(25 * 9) --> (225 + 13) --> (238 * 12) --> (2856 / 6) --> 476", "(13 - 6) --> (7 * 9) --> (63 - 25) --> (38 * 12) --> (456 + 20) --> 476"]}, "target": 476, "n_ways": 5, "round": 5}}