{"puzzleDate": "2023-11-05", "r1": {"n": [2, 5, 8, 10, 13, 15], "how": {"154": ["(13 + 5) --> (18 * 8) --> (144 + 10) --> 154", "(13 * 5) --> (65 - 8) --> (57 + 15) --> (72 * 2) --> (144 + 10) --> 154", "(13 + 10) --> (23 * 15) --> (345 / 5) --> (69.0 + 8) --> (77.0 * 2) --> 154", "(13 * 8) --> (104 * 15) --> (1560 / 10) --> (156.0 - 2) --> 154", "(13 - 8) --> (5 * 15) --> (75 + 2) --> (77 * 10) --> (770 / 5) --> 154", "(13 * 8) --> (104 * 15) --> (1560 / 2) --> (780.0 - 10) --> (770.0 / 5) --> 154", "(13 + 2) --> (15 / 5) --> (3.0 + 15) --> (18.0 * 8) --> (144.0 + 10) --> 154", "(5 + 10) --> (15 - 2) --> (13 * 13) --> (169 - 15) --> 154", "(5 + 8) --> (13 * 13) --> (169 - 15) --> 154", "(5 * 15) --> (75 + 10) --> (85 - 8) --> (77 * 2) --> 154", "(5 + 15) --> (20 - 8) --> (12 * 13) --> (156 - 2) --> 154", "(5 + 15) --> (20 - 2) --> (18 * 8) --> (144 + 10) --> 154", "(10 - 5) --> (5 + 8) --> (13 * 13) --> (169 - 15) --> 154", "(10 - 5) --> (5 + 15) --> (20 - 8) --> (12 * 13) --> (156 - 2) --> 154", "(10 * 8) --> (80 - 13) --> (67 - 5) --> (62 + 15) --> (77 * 2) --> 154", "(10 + 8) --> (18 * 5) --> (90 - 13) --> (77 * 2) --> 154", "(10 + 8) --> (18 + 15) --> (33 * 5) --> (165 - 13) --> (152 + 2) --> 154", "(10 / 2) --> (5.0 + 13) --> (18.0 * 8) --> (144.0 - 5) --> (139.0 + 15) --> 154", "(10 / 2) --> (5.0 + 8) --> (13.0 * 13) --> (169.0 - 15) --> 154", "(8 - 2) --> (6 * 15) --> (90 - 13) --> (77 * 10) --> (770 / 5) --> 154", "(15 - 5) --> (10 + 2) --> (12 * 13) --> (156 - 10) --> (146 + 8) --> 154", "(15 - 2) --> (13 * 13) --> (169 - 5) --> (164 - 10) --> 154", "(15 + 2) --> (17 * 8) --> (136 + 13) --> (149 + 5) --> 154"]}, "target": 154, "n_ways": 23, "round": 1}, "r2": {"n": [4, 9, 11, 13, 16, 20], "how": {"250": ["(4 + 13) --> (17 - 11) --> (6 + 20) --> (26 * 9) --> (234 + 16) --> 250", "(4 + 13) --> (17 + 9) --> (26 * 11) --> (286 - 20) --> (266 - 16) --> 250", "(11 + 13) --> (24 / 4) --> (6.0 + 20) --> (26.0 * 9) --> (234.0 + 16) --> 250", "(11 + 20) --> (31 * 9) --> (279 - 13) --> (266 - 16) --> 250", "(11 + 16) --> (27 * 9) --> (243 - 13) --> (230 + 20) --> 250", "(13 - 4) --> (9 + 20) --> (29 * 9) --> (261 - 11) --> 250", "(13 + 16) --> (29 * 9) --> (261 - 11) --> 250", "(20 - 16) --> (4 * 4) --> (16 + 13) --> (29 * 9) --> (261 - 11) --> 250"]}, "target": 250, "n_ways": 8, "round": 2}, "r3": {"n": [3, 5, 10, 13, 17, 20], "how": {"318": ["(3 * 10) --> (30 - 13) --> (17 * 20) --> (340 - 17) --> (323 - 5) --> 318", "(3 + 13) --> (16 * 20) --> (320 + 10) --> (330 - 17) --> (313 + 5) --> 318", "(3 * 13) --> (39 - 20) --> (19 * 17) --> (323 - 10) --> (313 + 5) --> 318", "(3 * 13) --> (39 - 20) --> (19 * 17) --> (323 - 5) --> 318", "(3 * 20) --> (60 / 10) --> (6.0 + 13) --> (19.0 * 17) --> (323.0 - 5) --> 318", "(3 * 17) --> (51 - 10) --> (41 + 20) --> (61 * 5) --> (305 + 13) --> 318", "(3 * 17) --> (51 + 10) --> (61 * 5) --> (305 + 13) --> 318", "(13 + 20) --> (33 * 10) --> (330 - 17) --> (313 + 5) --> 318", "(20 + 5) --> (25 * 13) --> (325 + 3) --> (328 - 10) --> 318", "(17 * 5) --> (85 + 10) --> (95 * 3) --> (285 + 13) --> (298 + 20) --> 318"]}, "target": 318, "n_ways": 10, "round": 3}, "r4": {"n": [5, 11, 14, 16, 22, 25], "how": {"460": ["(14 - 5) --> (9 + 22) --> (31 * 16) --> (496 - 25) --> (471 - 11) --> 460", "(14 + 5) --> (19 + 22) --> (41 * 11) --> (451 + 25) --> (476 - 16) --> 460", "(25 - 5) --> (20 + 22) --> (42 * 11) --> (462 + 14) --> (476 - 16) --> 460", "(25 + 16) --> (41 * 11) --> (451 + 14) --> (465 - 5) --> 460", "(16 - 11) --> (5 * 14) --> (70 + 22) --> (92 * 25) --> (2300 / 5) --> 460", "(16 - 11) --> (5 * 14) --> (70 + 22) --> (92 * 5) --> 460", "(22 - 14) --> (8 * 16) --> (128 - 25) --> (103 - 11) --> (92 * 5) --> 460"]}, "target": 460, "n_ways": 7, "round": 4}, "r5": {"n": [6, 8, 13, 19, 21, 23], "how": {"543": ["(19 + 6) --> (25 * 21) --> (525 + 8) --> (533 - 13) --> (520 + 23) --> 543", "(19 + 21) --> (40 * 13) --> (520 + 23) --> 543", "(6 + 23) --> (29 * 19) --> (551 - 8) --> 543", "(6 + 23) --> (29 * 19) --> (551 + 13) --> (564 - 21) --> 543"]}, "target": 543, "n_ways": 4, "round": 5}}