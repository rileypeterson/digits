{"puzzleDate": "2023-10-29", "r1": {"n": [3, 5, 7, 9, 13, 15], "how": {"160": ["(5 * 7) --> (35 + 9) --> (44 * 3) --> (132 + 13) --> (145 + 15) --> 160", "(5 * 13) --> (65 - 9) --> (56 * 3) --> (168 + 7) --> (175 - 15) --> 160", "(5 + 9) --> (14 * 13) --> (182 - 7) --> (175 - 15) --> 160", "(5 * 9) --> (45 - 13) --> (32 * 15) --> (480 / 3) --> 160", "(5 * 3) --> (15 - 13) --> (2 + 15) --> (17 * 9) --> (153 + 7) --> 160", "(5 - 3) --> (2 + 15) --> (17 * 9) --> (153 + 7) --> 160", "(7 * 13) --> (91 + 5) --> (96 * 15) --> (1440 / 9) --> 160", "(7 + 13) --> (20 + 9) --> (29 * 5) --> (145 + 15) --> 160", "(7 + 13) --> (20 + 9) --> (29 + 3) --> (32 * 5) --> 160", "(7 + 13) --> (20 - 3) --> (17 + 15) --> (32 * 5) --> 160", "(7 * 13) --> (91 * 3) --> (273 + 15) --> (288 * 5) --> (1440 / 9) --> 160", "(7 * 9) --> (63 - 13) --> (50 - 3) --> (47 - 15) --> (32 * 5) --> 160", "(7 * 15) --> (105 - 9) --> (96 * 5) --> (480 / 3) --> 160", "(13 - 7) --> (6 / 3) --> (2.0 + 9) --> (11.0 * 15) --> (165.0 - 5) --> 160", "(13 * 9) --> (117 / 3) --> (39.0 - 7) --> (32.0 * 5) --> 160", "(13 + 9) --> (22 + 3) --> (25 * 7) --> (175 - 15) --> 160", "(13 - 3) --> (10 / 5) --> (2.0 + 15) --> (17.0 * 9) --> (153.0 + 7) --> 160", "(13 * 3) --> (39 - 7) --> (32 * 5) --> 160", "(9 + 3) --> (12 * 15) --> (180 - 7) --> (173 - 13) --> 160", "(9 + 15) --> (24 * 7) --> (168 + 5) --> (173 - 13) --> 160", "(9 + 15) --> (24 * 7) --> (168 - 5) --> (163 - 3) --> 160", "(3 + 15) --> (18 - 5) --> (13 * 13) --> (169 - 9) --> 160", "(3 * 15) --> (45 - 13) --> (32 * 5) --> 160"]}, "target": 160, "n_ways": 23, "round": 1}, "r2": {"n": [4, 6, 10, 12, 15, 18], "how": {"173": ["(12 + 6) --> (18 * 10) --> (180 - 18) --> (162 + 15) --> (177 - 4) --> 173", "(12 + 6) --> (18 - 4) --> (14 * 10) --> (140 + 18) --> (158 + 15) --> 173", "(6 + 18) --> (24 - 4) --> (20 * 10) --> (200 - 12) --> (188 - 15) --> 173", "(6 + 10) --> (16 * 12) --> (192 - 15) --> (177 - 4) --> 173", "(18 * 10) --> (180 + 12) --> (192 - 15) --> (177 - 4) --> 173"]}, "target": 173, "n_ways": 5, "round": 2}, "r3": {"n": [5, 8, 10, 12, 18, 20], "how": {"227": ["(20 - 8) --> (12 + 12) --> (24 * 10) --> (240 - 18) --> (222 + 5) --> 227", "(20 * 18) --> (360 / 8) --> (45.0 * 5) --> (225.0 + 12) --> (237.0 - 10) --> 227", "(20 - 18) --> (2 * 12) --> (24 * 10) --> (240 - 8) --> (232 - 5) --> 227", "(20 * 12) --> (240 - 8) --> (232 - 5) --> 227", "(20 * 12) --> (240 - 8) --> (232 + 5) --> (237 - 10) --> 227", "(20 * 12) --> (240 - 18) --> (222 + 5) --> 227", "(20 * 12) --> (240 - 18) --> (222 - 5) --> (217 + 10) --> 227", "(20 * 10) --> (200 - 8) --> (192 + 18) --> (210 + 12) --> (222 + 5) --> 227", "(20 + 10) --> (30 * 8) --> (240 - 18) --> (222 + 5) --> 227", "(20 * 10) --> (200 / 8) --> (25.0 + 18) --> (43.0 * 5) --> (215.0 + 12) --> 227", "(20 / 10) --> (2.0 + 18) --> (20.0 * 12) --> (240.0 - 8) --> (232.0 - 5) --> 227", "(12 - 8) --> (4 + 10) --> (14 * 18) --> (252 - 20) --> (232 - 5) --> 227"]}, "target": 227, "n_ways": 12, "round": 3}, "r4": {"n": [5, 9, 11, 17, 21, 24], "how": {"438": ["(17 + 5) --> (22 * 21) --> (462 - 24) --> 438", "(17 - 5) --> (12 + 21) --> (33 + 9) --> (42 * 11) --> (462 - 24) --> 438", "(17 * 24) --> (408 + 21) --> (429 + 9) --> 438", "(17 + 21) --> (38 * 11) --> (418 + 5) --> (423 + 24) --> (447 - 9) --> 438", "(24 + 21) --> (45 * 9) --> (405 + 17) --> (422 + 11) --> (433 + 5) --> 438"]}, "target": 438, "n_ways": 5, "round": 4}, "r5": {"n": [4, 7, 12, 14, 21, 23], "how": {"538": ["(12 / 4) --> (3.0 + 21) --> (24.0 * 23) --> (552.0 - 14) --> 538", "(12 - 4) --> (8 * 21) --> (168 * 23) --> (3864 / 7) --> (552.0 - 14) --> 538", "(4 * 21) --> (84 / 7) --> (12.0 + 12) --> (24.0 * 23) --> (552.0 - 14) --> 538", "(21 - 4) --> (17 + 7) --> (24 * 23) --> (552 - 14) --> 538", "(21 + 23) --> (44 * 12) --> (528 - 4) --> (524 + 14) --> 538"]}, "target": 538, "n_ways": 5, "round": 5}}